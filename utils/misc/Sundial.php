<?php namespace App\Utils\Misc;

// The MIT License (MIT)

// Copyright (c) 2015 Tristan Strathearn

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// Don't squawk.
!defined('BANTAM') ? exit() : null;

/**
* A sleek, user friendly way to work with dates and times based on the
* gregorian calendar.
* <code>
* // Get the time, 5 days from now in seconds since the epoch.
* Sundial::now()->days(5)->time();
*
* // Get how many seconds there are in 3 months.
* Sundial::now()->months(3)->raw()->time();
*
* // Preparing for the next two examples.
* $a = Sundial::now()->days(30);
* $b = Sundial::now();
*
* // Get the difference between two Sundials.
* $diff = $a->difference($b);
*
* // Compare two Sundial instances.
* $isGreater = $a->compare($b, Sundial::TIME_GREATER); // Returns true.
* </code>
* @package App\Utils\Misc
* @author Tristan Strathearn <r3oath@gmail.com>
* @license http://opensource.org/licenses/MIT MIT License (MIT)
*/
class Sundial {
    /**
    * @var int The current stored time for this Sundial.
    */
    private $time;

    /**
    * @var int The time at which this Sundial was created.
    */
    private $init_time;

    const TIME_GREATER = 1;
    const TIME_LESS = -1;
    const TIME_EQUAL = 0;

    /**
    * Creates a new Sundial intance. Sets the recorded time to the time it
    * was instantiated.
    * @return Sundial The new Sundial instance.
    */
    private function __construct() {
        $this->time = time();
        $this->init_time = $this->time;
        return $this;
    }

    /**
    * Returns a new instance of Sundial, unless $chainable is set to false,
    * in which case it will return the default value returned from time().
    * @param bool $chainable If true, returns a Sundial instace, false returns the default time().
    * @return mixed A new Sundial instance or default time().
    */
    public static function now($chainable=true) {
        return ($chainable === true) ? new Sundial() : time();
    }

    /**
    * Returns the current calculated time.
    * @return numeric The calculated time.
    */
    public function time() {
        return $this->time;
    }

    /**
    * Takes the current caclulated time and subtracts the time when the class was
    * instantiated. Helpful if you just want to cacluate how long a day or 2 weeks
    * etc is in the equivalent seconds using time() afterwards.
    * @return Sundial A reference to the current Sundial instance.
    */
    public function raw() {
        $this->time -= $this->init_time;
        return $this;
    }

    /**
    * Return the calculated time in a specific date format. You can pass in array
    * of the various formats you need, such as ATOM, RSS or RFC822, basically anything
    * available as a constant in the DateTime class. You can also specify a custom
    * format. Pass in DateTime constants as entries and custom formats as key/value
    * pairs. Example: ['ATOM', 'RFC822', 'CustomDate' => 'F Y'].
    * @param array $options The list of Date/Time formats.
    * @return array An array of the formated dates.
    */
    public function date($options=[]) {
        $date_types = array();

        foreach ($options as $key => $value) {
            // Ignore the E_WARNING generated by constant if the value cannot
            // be found, check for a null return though.
            $constant = @constant('DateTime::'.$value);
            if($constant !== null) {
                $date_types[$value] = date($constant, $this->time);
            } else if(!is_numeric($key)) {
                // If a constant isn't found, and the array key is not numeric,
                // it's (most-likely) a user specified date/time format, process it.
                $date_types[$key] = date($value, $this->time);
            } else {
                // No luck, just set it to null and the user can decide what to
                // do with it...
                $date_types[$value] = null;
            }
        }

        if(count($date_types) === 0) {
            return null;
        }

        return $date_types;
    }

    /**
    * Compare this Sundials calculated time against another Sundial instance
    * or time value using the const comparable types TIME_GREATER, TIME_LESS and
    * TIME_EQUAL.
    * @param mixed $other Either a Sundial instance or time value to compare against.
    * @param int $type Choice of Sundial::TIME_GREATER, Sundial::TIME_LESS or Sundial::TIME_EQUAL
    * @return bool The result of the chosen comparison.
    */
    public function compare($other, $type) {
        $time = ($other instanceOf Sundial) ? $other->time : $other;

        switch ($type) {
            case self::TIME_EQUAL:
                return (($this->time - $time) == 0);
                break;

            case self::TIME_GREATER:
                return ($this->time > $time);
                break;

            case self::TIME_LESS:
                return ($this->time < $time);
                break;
        }
    }

    /**
    * Get the difference in seconds between this Sundial's calculated time and
    * another Sundial's or time value. The value returned is absolute.
    * @param mixed $other Another Sundial instance or a time value.
    * @return int The difference between the two times.
    */
    public function difference($other) {
        $time = ($other instanceOf Sundial) ? $other->time : $other;
        return abs($this->time - $time);
    }

    /**
    * Add $delta seconds to the current calculated time.
    * @param int $delta The amount of seconds.
    * @return Sundial The current Sundial.
    */
    public function seconds($delta) {
        $this->time = $this->time + $delta;
        return $this;
    }

    /**
    * Add $delta minutes to the current calculated time.
    * @param int $delta The amount of minutes.
    * @return Sundial The current Sundial.
    */
    public function minutes($delta) {
        return $this->seconds($delta * 60);
    }

    /**
    * Add $delta hours to the current calculated time.
    * @param int $delta The amount of hours.
    * @return Sundial The current Sundial.
    */
    public function hours($delta) {
        return $this->minutes($delta * 60);
    }

    /**
    * Add $delta days to the current calculated time.
    * @param int $delta The amount of days.
    * @return Sundial The current Sundial.
    */
    public function days($delta) {
        return $this->hours($delta * 24);
    }

    /**
    * Add $delta weeks to the current calculated time.
    * @param int $delta The amount of weeks.
    * @return Sundial The current Sundial.
    */
    public function weeks($delta) {
        return $this->days($delta * 7);
    }

    /**
    * Add $delta months to the current calculated time.
    * @param int $delta The amount of months.
    * @return Sundial The current Sundial.
    */
    public function months($delta) {
        return $this->weeks($delta * 4.348125);
    }

    /**
    * Add $delta years to the current calculated time.
    * @param int $delta The amount of years.
    * @return Sundial The current Sundial.
    */
    public function years($delta) {
        return $this->weeks($delta * 52.1775);
    }
}
